{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/cropperjs-gif.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GifCropper","options","background","this","containerCanvas","document","createElement","containerCtx","getContext","convertorCanvas","convertorCtx","containerCenterX","containerCenterY","image","height","width","debug","nextTick","callback","setTimeout","style","body","insertBefore","firstChild","__webpack_exports__","CropperjsGif","ERROR","IMAGE_LOAD_ERROR","IMAGE_READ_ERROR","DECODE_ERROR","ENCODE_ERROR","crop","cropper","cropArea","getData","that","limitRatio","calcLimitRatio","limitCropArea","x","Math","round","y","scaleX","scaleY","rotate","readAndDecodeGif","setupCanvas","cropFrame","result","saveGif","cropBlob","xRatio","maxWidth","yRatio","maxHeight","min","Image","onload","naturalWidth","naturalHeight","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","status","decode","response","errorHandler","Error","statusText","open","src","send","onerror","arraybuffer","gifDecoder","EasyGif","decoder","frames","decompressFrames","error","radian","PI","rotatedBoxWidth","cos","sin","rotatedBoxHeight","offsetX","offsetY","max","clearRect","frameIndex","cropImgData","frame","imgData","frameToImageData","save","translate","scale","drawImage","drawImgDataToCanvas","restore","globalCompositeOperation","fillStyle","fillRect","getImageData","push","length","putImageData","dims","left","top","imgDataList","encoder","addFrame","delay","on","blob","abort","workers","freeWorkers","terminate","render","errorCode","window","requestAnimationFrame","webkitRequestAnimationFrame"],"mappings":"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","file":"cropperjs-gif.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\r\n * a plugin support cropperjs to crop gif image\r\n * \r\n * options:\r\n *  background: \"#fff\" default background color\r\n *  maxWidth: output image max width\r\n *  maxHeight: output image max height\r\n *  src: original image url (blob, base64, http)\r\n *  onerror: error callback, onerror(errorCode, error|null)\r\n */\r\nfunction GifCropper(options) {\r\n    options.background = options.background || '#fff';\r\n    this.options = options;\r\n    this.containerCanvas = document.createElement('canvas');\r\n    this.containerCtx = this.containerCanvas.getContext('2d');\r\n    this.convertorCanvas = document.createElement('canvas');\r\n    this.convertorCtx = this.convertorCanvas.getContext('2d');\r\n    this.containerCenterX = null;\r\n    this.containerCenterY = null;\r\n    this.image = null;\r\n    this.height = null;\r\n    this.width = null;\r\n\r\n    if(options.debug) {\r\n        nextTick = function(callback){\r\n            setTimeout(callback, 500);\r\n        };\r\n        this.containerCanvas.style.width=\"200px\";\r\n        this.convertorCanvas.style.width=\"200px\";\r\n        document.body.insertBefore(this.containerCanvas, document.body.firstChild);\r\n        document.body.insertBefore(this.convertorCanvas, document.body.firstChild);\r\n    }\r\n}\r\n\r\nvar ERROR = {\r\n    IMAGE_LOAD_ERROR: \"IMAGE_LOAD_ERROR\",\r\n    IMAGE_READ_ERROR: \"IMAGE_READ_ERROR\",\r\n    DECODE_ERROR: \"DECODE_ERROR\",\r\n    ENCODE_ERROR: \"ENCODE_ERROR\"\r\n}\r\n\r\nGifCropper.prototype.ERROR = ERROR;\r\n\r\n/**\r\n * cropper: cropperjs instance\r\n */\r\nGifCropper.prototype.crop = function(cropper, callback){\r\n    var cropArea = cropper.getData();\r\n    var that = this;\r\n    var limitRatio = this.calcLimitRatio(cropArea);\r\n    var limitCropArea = {\r\n        x: Math.round(cropArea.x * limitRatio),\r\n        y: Math.round(cropArea.y * limitRatio),\r\n        width: Math.round(cropArea.width * limitRatio),\r\n        height: Math.round(cropArea.height * limitRatio),\r\n        scaleX: cropArea.scaleX * limitRatio,\r\n        scaleY: cropArea.scaleY * limitRatio,\r\n        rotate: cropArea.rotate\r\n    };\r\n\r\n    this.readAndDecodeGif(function(){\r\n        that.setupCanvas(limitCropArea, limitRatio);\r\n        that.cropFrame(0, limitCropArea, [], function(result) {\r\n            that.saveGif(limitCropArea, result, function(cropBlob){\r\n                callback && callback(cropBlob);\r\n            });\r\n        });\r\n    });\r\n}\r\n/**\r\n * calculate ratio of output size limit to smaller then maxWidth and maxHeight \r\n */\r\nGifCropper.prototype.calcLimitRatio = function(cropArea){\r\n    var xRatio = this.options.maxWidth / cropArea.width;\r\n    var yRatio = this.options.maxHeight / cropArea.height;\r\n    if(xRatio < 1 || yRatio < 1) {\r\n        return Math.min(xRatio, yRatio);\r\n    }\r\n    return 1;\r\n};\r\n/**\r\n * get gif width and height, decode gif to frame array\r\n */\r\nGifCropper.prototype.readAndDecodeGif = function(callback){\r\n    var that = this;\r\n    this.image = new Image();\r\n    this.image.onload = function(){\r\n        that.width = this.naturalWidth || this.width;\r\n        that.height = this.naturalHeight || this.height;\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.responseType = \"arraybuffer\";\r\n        xhr.onreadystatechange = function(){\r\n            if(xhr.readyState == 4) {\r\n                if(xhr.status == 200) {\r\n                    that.decode(xhr.response, callback);\r\n                } else {\r\n                    that.errorHandler(ERROR.IMAGE_READ_ERROR, new Error(xhr.statusText));\r\n                }\r\n            }\r\n        }\r\n        xhr.open('GET', that.options.src);\r\n        xhr.send(null);\r\n    }\r\n    this.image.onerror = function(){\r\n        that.errorHandler(ERROR.IMAGE_LOAD_ERROR);\r\n    }\r\n    this.image.src = this.options.src;\r\n}\r\n/**\r\n * decode gif\r\n */\r\nGifCropper.prototype.decode = function(arraybuffer, callback){\r\n    try {\r\n        var gifDecoder = EasyGif.decoder(arraybuffer);\r\n        this.frames = gifDecoder.decompressFrames();\r\n        callback && callback();\r\n    } catch (error) {\r\n        this.errorHandler(ERROR.DECODE_ERROR, error);\r\n    }\r\n}\r\n/**\r\n * setup canvas size\r\n */\r\nGifCropper.prototype.setupCanvas = function(cropArea, limitRatio) {\r\n    // 计算图片旋转后的尺寸和切剪后的尺寸， 取最大的一方作为container的尺寸\r\n    var radian = Math.PI/180*cropArea.rotate;\r\n    var rotatedBoxWidth = (this.width*Math.cos(radian)+this.height*Math.sin(radian)) * limitRatio;\r\n    var rotatedBoxHeight = (this.height*Math.cos(radian)+this.width*Math.sin(radian)) * limitRatio;\r\n    \r\n    this.offsetX = -Math.min(cropArea.x, 0);\r\n    this.offsetY = -Math.min(cropArea.y, 0);\r\n    this.containerCenterX = this.offsetX + rotatedBoxWidth / 2;\r\n    this.containerCenterY = this.offsetY + rotatedBoxHeight / 2;\r\n\r\n    this.containerCanvas.width = Math.max(this.offsetX + rotatedBoxWidth, this.offsetX + cropArea.width, cropArea.x + cropArea.width);\r\n    this.containerCanvas.height = Math.max(this.offsetY + rotatedBoxHeight, this.offsetY + cropArea.height, cropArea.y + cropArea.height);\r\n    this.containerCtx.clearRect(0, 0, this.containerCanvas.width, this.containerCanvas.height);\r\n\r\n    this.convertorCanvas.width = this.width;\r\n    this.convertorCanvas.height = this.height;\r\n}\r\n/**\r\n * crop one frame by index\r\n */\r\nGifCropper.prototype.cropFrame = function(frameIndex, cropArea, result, callback) {\r\n    var frame = this.frames[frameIndex];\r\n    var imgData = EasyGif.frameToImageData(this.containerCtx, frame);\r\n    var cropImgData = null;\r\n    var that = this;\r\n\r\n    this.containerCtx.save();\r\n    this.containerCtx.translate(this.containerCenterX, this.containerCenterY);\r\n    this.containerCtx.rotate(cropArea.rotate*Math.PI/180);\r\n    this.containerCtx.scale(cropArea.scaleX, cropArea.scaleY);\r\n    this.containerCtx.drawImage(this.drawImgDataToCanvas(frame, imgData), -this.convertorCanvas.width/2, -this.convertorCanvas.height/2);\r\n    this.containerCtx.restore();\r\n\r\n    if(frameIndex == 0 && this.containerCtx.globalCompositeOperation) {\r\n        // 添加gif背景颜色\r\n        this.containerCtx.fillStyle = this.options.background;\r\n        this.containerCtx.globalCompositeOperation = \"destination-over\";\r\n        this.containerCtx.fillRect(0, 0, this.containerCanvas.width, this.containerCanvas.height);\r\n        this.containerCtx.globalCompositeOperation = \"source-over\";\r\n    }\r\n                \r\n    cropImgData = this.containerCtx.getImageData(\r\n        cropArea.x + this.offsetX,\r\n        cropArea.y + this.offsetY,\r\n        cropArea.width,\r\n        cropArea.height\r\n    );\r\n\r\n    result.push(cropImgData);\r\n\r\n    frameIndex++;\r\n    if(frameIndex < this.frames.length) {\r\n        nextTick(function(){\r\n            that.cropFrame(frameIndex, cropArea, result, callback);\r\n        });\r\n    } else {\r\n        callback && callback(result);\r\n    }\r\n}\r\nGifCropper.prototype.drawImgDataToCanvas = function(frame, imgData) {\r\n    this.convertorCtx.clearRect(0,0, this.width, this.height);\r\n    this.convertorCtx.putImageData(imgData, frame.dims.left, frame.dims.top);\r\n    return this.convertorCanvas;\r\n}\r\nGifCropper.prototype.saveGif = function(cropArea, imgDataList, callback){\r\n    var options = this.options.encoder || {};\r\n    options.width = cropArea.width;\r\n    options.height = cropArea.height;\r\n\r\n    try {\r\n        var encoder = EasyGif.encoder(options);\r\n    \r\n        for(var i=0;i<imgDataList.length;i++) {\r\n            encoder.addFrame(imgDataList[i], {\r\n                delay: this.frames[i].delay\r\n            });\r\n        }\r\n        encoder.on('finished', function(blob){\r\n            callback && callback(blob);\r\n\r\n            encoder.abort();\r\n            var workers = encoder.freeWorkers;\r\n            for (var i = 0; i < workers.length; i++) {\r\n                var worker = workers[i];\r\n                worker.terminate();\r\n            }\r\n        });\r\n        encoder.render();\r\n    } catch (error) {\r\n        this.errorHandler(ERROR.DECODE_ERROR, error);\r\n    }\r\n}\r\n\r\nGifCropper.prototype.errorHandler = function(errorCode, error){\r\n    this.options.onerror && this.options.onerror(errorCode, error);\r\n}\r\n\r\nvar nextTick = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.setTimeout;\r\n\r\n\r\nvar CropperjsGif = {\r\n    /**\r\n     * options: GifCropper options\r\n     * cropper: cropperjs instance\r\n     * callback: \r\n     */\r\n    crop: function(options, cropper, callback){\r\n        return new GifCropper(options).crop(cropper, callback);\r\n    }\r\n}\r\n\r\nexport { CropperjsGif };"],"sourceRoot":""}